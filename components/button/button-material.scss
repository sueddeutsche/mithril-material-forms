@import "../../lib/typography";
@import "../../lib/units";
@import "../../lib/reset";
@import "../../lib/colors";
@import "../../lib/interface";
@import "../../lib/elevation";


@mixin button-material() {
    &.mmf-button {
        @include reset-button();

        border-radius: $mmf-radius;
        color: map-get($color-material, 0);
        // background-color should actually be $mmf-color-secondary__contrast, but inherit is the more conform sane
        // default, since the button should not have any visible background per default
        background-color: inherit;

        transition: background-color $mmf-transition;

        &.is-enabled {
            &:hover,
            &:focus {
                background-color: map-get($color-material, 2);
            }
        }

        &.is-disabled {
            color: rgba(map-get($color-material, 0), map-get($opacity, 2));
            &:focus,
            &:hover {
                background-color: inherit;
                color: rgba(map-get($color-material, 0), map-get($opacity, 2));
                cursor: default;
            }
        }

        .mmf-icon {
            font-size: 1.5em;
        }
    }

    &.mmf-button--raised {
        @include elevation(1);
        color: map-get($color-material, 2);
        background-color: map-get($color-material, 0);

        &.is-enabled {
            &:hover,
            &:focus {
                background-color: darken(map-get($color-material, 0), map-get($distance, 1));
            }
        }

        &.is-disabled,
        &.is-disabled:hover,
        &.is-disabled:focus {
            color: rgba(map-get($color-material, 2), map-get($opacity, 2));
            background-color: rgba(map-get($color-material, 3), map-get($opacity, 2));
            cursor: default;
        }
    }
}
